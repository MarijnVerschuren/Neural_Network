; Listing generated by Microsoft (R) Optimizing Compiler Version 19.33.31630.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__imp_?_Random_device@std@@YAIXZ:PROC
EXTRN	__imp_srand:PROC
	ORG $+2
$SG4294956716 DB 'AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2', 00H
PUBLIC	?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_bits
PUBLIC	?_Adjust@?$uniform_int@I@std@@CAII@Z		; std::uniform_int<unsigned int>::_Adjust
PUBLIC	??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAA@AEAVrandom_device@1@@Z ; std::_Rng_from_urng<unsigned int,std::random_device>::_Rng_from_urng<unsigned int,std::random_device>
PUBLIC	??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAII@Z ; std::_Rng_from_urng<unsigned int,std::random_device>::operator()
PUBLIC	?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAIXZ ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_all_bits
PUBLIC	??$_Eval@Vrandom_device@std@@@?$uniform_int@I@std@@AEBAIAEAVrandom_device@1@II@Z ; std::uniform_int<unsigned int>::_Eval<std::random_device>
PUBLIC	??$?RVrandom_device@std@@@?$uniform_int@I@std@@QEAAIAEAVrandom_device@1@@Z ; std::uniform_int<unsigned int>::operator()<std::random_device>
PUBLIC	?_Init@param_type@?$uniform_int@I@std@@QEAAXII@Z ; std::uniform_int<unsigned int>::param_type::_Init
PUBLIC	??0param_type@?$uniform_int@I@std@@QEAA@II@Z	; std::uniform_int<unsigned int>::param_type::param_type
PUBLIC	??0?$uniform_int@I@std@@QEAA@II@Z		; std::uniform_int<unsigned int>::uniform_int<unsigned int>
PUBLIC	??0?$uniform_int_distribution@I@std@@QEAA@II@Z	; std::uniform_int_distribution<unsigned int>::uniform_int_distribution<unsigned int>
PUBLIC	?init_random@Math@@YAXI@Z			; Math::init_random
PUBLIC	??Rrandom_device@std@@QEAAIXZ			; std::random_device::operator()
PUBLIC	?max@random_device@std@@SAIXZ			; std::random_device::max
PUBLIC	?min@random_device@std@@SAIXZ			; std::random_device::min
PUBLIC	??0random_device@std@@QEAA@XZ			; std::random_device::random_device
PUBLIC	?init_random@Math@@YAXXZ			; Math::init_random
	ALIGN	4

?last@Eigen@@3V?$SymbolExpr@Usymbolic_last_tag@internal@Eigen@@@symbolic@1@B DB 01H DUP (?) ; Eigen::last
	ALIGN	4

?all@Eigen@@3Uall_t@internal@1@B DB 01H DUP (?)		; Eigen::all
	ALIGN	4

?lastp1@Eigen@@3V?$AddExpr@V?$SymbolExpr@Usymbolic_last_tag@internal@Eigen@@@symbolic@Eigen@@V?$ValueExpr@V?$FixedInt@$00@internal@Eigen@@@23@@symbolic@1@B DW 01H DUP (?) ; Eigen::lastp1
	ALIGN	4

??$fix@$00@Eigen@@3V?$FixedInt@$00@internal@1@B DB 01H DUP (?) ; Eigen::fix<1>
	ALIGN	4

?end@placeholders@Eigen@@3V?$AddExpr@V?$SymbolExpr@Usymbolic_last_tag@internal@Eigen@@@symbolic@Eigen@@V?$ValueExpr@V?$FixedInt@$00@internal@Eigen@@@23@@symbolic@2@B DW 01H DUP (?) ; Eigen::placeholders::end
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ DD imagerel $LN7
	DD	imagerel $LN7+70
	DD	imagerel $unwind$?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAA@AEAVrandom_device@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+137
	DD	imagerel $unwind$??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAA@AEAVrandom_device@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAII@Z DD imagerel $LN10
	DD	imagerel $LN10+229
	DD	imagerel $unwind$??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAIXZ DD imagerel $LN6
	DD	imagerel $LN6+127
	DD	imagerel $unwind$?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Eval@Vrandom_device@std@@@?$uniform_int@I@std@@AEBAIAEAVrandom_device@1@II@Z DD imagerel $LN5
	DD	imagerel $LN5+180
	DD	imagerel $unwind$??$_Eval@Vrandom_device@std@@@?$uniform_int@I@std@@AEBAIAEAVrandom_device@1@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?RVrandom_device@std@@@?$uniform_int@I@std@@QEAAIAEAVrandom_device@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$?RVrandom_device@std@@@?$uniform_int@I@std@@QEAAIAEAVrandom_device@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E?$fix@$00@Eigen@@YAXXZ DD imagerel ??__E?$fix@$00@Eigen@@YAXXZ
	DD	imagerel ??__E?$fix@$00@Eigen@@YAXXZ+21
	DD	imagerel $unwind$??__E?$fix@$00@Eigen@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0param_type@?$uniform_int@I@std@@QEAA@II@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??0param_type@?$uniform_int@I@std@@QEAA@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$uniform_int@I@std@@QEAA@II@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??0?$uniform_int@I@std@@QEAA@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$uniform_int_distribution@I@std@@QEAA@II@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??0?$uniform_int_distribution@I@std@@QEAA@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?init_random@Math@@YAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+23
	DD	imagerel $unwind$?init_random@Math@@YAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Rrandom_device@std@@QEAAIXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$??Rrandom_device@std@@QEAAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eall@Eigen@@YAXXZ DD imagerel ??__Eall@Eigen@@YAXXZ
	DD	imagerel ??__Eall@Eigen@@YAXXZ+21
	DD	imagerel $unwind$??__Eall@Eigen@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Elastp1@Eigen@@YAXXZ DD imagerel ??__Elastp1@Eigen@@YAXXZ
	DD	imagerel ??__Elastp1@Eigen@@YAXXZ+49
	DD	imagerel $unwind$??__Elastp1@Eigen@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Elast@Eigen@@YAXXZ DD imagerel ??__Elast@Eigen@@YAXXZ
	DD	imagerel ??__Elast@Eigen@@YAXXZ+21
	DD	imagerel $unwind$??__Elast@Eigen@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?init_random@Math@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+87
	DD	imagerel $unwind$?init_random@Math@@YAXXZ
;	COMDAT xdata
xdata	SEGMENT
$unwind$?init_random@Math@@YAXXZ DD 011319H
	DD	08204H
	DD	imagerel __GSHandlerCheck
	DD	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Elast@Eigen@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Elastp1@Eigen@@YAXXZ DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eall@Eigen@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Rrandom_device@std@@QEAAIXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?init_random@Math@@YAXI@Z DD 010801H
	DD	04208H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$uniform_int_distribution@I@std@@QEAA@II@Z DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$uniform_int@I@std@@QEAA@II@Z DD 011201H
	DD	06212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0param_type@?$uniform_int@I@std@@QEAA@II@Z DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E?$fix@$00@Eigen@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?RVrandom_device@std@@@?$uniform_int@I@std@@QEAAIAEAVrandom_device@1@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Eval@Vrandom_device@std@@@?$uniform_int@I@std@@AEBAIAEAVrandom_device@1@II@Z DD 012719H
	DD	0a218H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAIXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAII@Z DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAA@AEAVrandom_device@1@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ DD 010901H
	DD	06209H
?last$initializer$@Eigen@@3P6AXXZEA DQ FLAT:??__Elast@Eigen@@YAXXZ ; Eigen::last$initializer$
?lastp1$initializer$@Eigen@@3P6AXXZEA DQ FLAT:??__Elastp1@Eigen@@YAXXZ ; Eigen::lastp1$initializer$
?all$initializer$@Eigen@@3P6AXXZEA DQ FLAT:??__Eall@Eigen@@YAXXZ ; Eigen::all$initializer$
?all$initializer$@placeholders@Eigen@@3P6AXXZEA DQ FLAT:??__Eall@placeholders@Eigen@@YAXXZ ; Eigen::placeholders::all$initializer$
?last$initializer$@placeholders@Eigen@@3P6AXXZEA DQ FLAT:??__Elast@placeholders@Eigen@@YAXXZ ; Eigen::placeholders::last$initializer$
?end$initializer$@placeholders@Eigen@@3P6AXXZEA DQ FLAT:??__Eend@placeholders@Eigen@@YAXXZ ; Eigen::placeholders::end$initializer$
??$fix@$00$initializer$@Eigen@@3P6AXXZEA DQ FLAT:??__E?$fix@$00@Eigen@@YAXXZ ; ??$fix@$00$initializer$@Eigen@@3P6AXXZEA
; Function compile flags: /Odtp
; File C:\Users\marij\OneDrive\Documenten\GitHub\Neural_Network\src\math.cpp
;	COMDAT ?init_random@Math@@YAXXZ
_TEXT	SEGMENT
rd$ = 32
dist$ = 40
__$ArrayPad$ = 48
?init_random@Math@@YAXXZ PROC				; Math::init_random, COMDAT

; 6    : void Math::init_random() {

$LN4:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000b	48 33 c4	 xor	 rax, rsp
  0000e	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 7    :     std::random_device rd;

  00013	48 8d 4c 24 20	 lea	 rcx, QWORD PTR rd$[rsp]
  00018	e8 00 00 00 00	 call	 ??0random_device@std@@QEAA@XZ ; std::random_device::random_device

; 8    :     std::uniform_int_distribution<uint32_t> dist(0, 0xffffffff);

  0001d	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  00023	33 d2		 xor	 edx, edx
  00025	48 8d 4c 24 28	 lea	 rcx, QWORD PTR dist$[rsp]
  0002a	e8 00 00 00 00	 call	 ??0?$uniform_int_distribution@I@std@@QEAA@II@Z ; std::uniform_int_distribution<unsigned int>::uniform_int_distribution<unsigned int>

; 9    :     init_random(dist(rd));

  0002f	48 8d 54 24 20	 lea	 rdx, QWORD PTR rd$[rsp]
  00034	48 8d 4c 24 28	 lea	 rcx, QWORD PTR dist$[rsp]
  00039	e8 00 00 00 00	 call	 ??$?RVrandom_device@std@@@?$uniform_int@I@std@@QEAAIAEAVrandom_device@1@@Z ; std::uniform_int<unsigned int>::operator()<std::random_device>
  0003e	8b c8		 mov	 ecx, eax
  00040	e8 00 00 00 00	 call	 ?init_random@Math@@YAXI@Z ; Math::init_random

; 10   : }

  00045	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0004a	48 33 cc	 xor	 rcx, rsp
  0004d	e8 00 00 00 00	 call	 __security_check_cookie
  00052	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00056	c3		 ret	 0
?init_random@Math@@YAXXZ ENDP				; Math::init_random
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\marij\OneDrive\Documenten\GitHub\Neural_Network\dependencies\Eigen\src\Core\util\IndexedViewHelper.h
;	COMDAT ??__Elast@Eigen@@YAXXZ
text$di	SEGMENT
??__Elast@Eigen@@YAXXZ PROC				; Eigen::`dynamic initializer for 'last'', COMDAT

; 38   : static const symbolic::SymbolExpr<internal::symbolic_last_tag> last; // PLEASE use Eigen::last   instead of Eigen::placeholders::last

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?last@Eigen@@3V?$SymbolExpr@Usymbolic_last_tag@internal@Eigen@@@symbolic@1@B
  0000b	e8 00 00 00 00	 call	 ??0?$SymbolExpr@Usymbolic_last_tag@internal@Eigen@@@symbolic@Eigen@@QEAA@XZ ; Eigen::symbolic::SymbolExpr<Eigen::internal::symbolic_last_tag>::SymbolExpr<Eigen::internal::symbolic_last_tag>
  00010	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00014	c3		 ret	 0
??__Elast@Eigen@@YAXXZ ENDP				; Eigen::`dynamic initializer for 'last''
text$di	ENDS
; Function compile flags: /Odtp
; File C:\Users\marij\OneDrive\Documenten\GitHub\Neural_Network\dependencies\Eigen\src\Core\util\IndexedViewHelper.h
;	COMDAT ??__Elastp1@Eigen@@YAXXZ
text$di	SEGMENT
$T1 = 32
??__Elastp1@Eigen@@YAXXZ PROC				; Eigen::`dynamic initializer for 'lastp1'', COMDAT

; 57   : static const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > lastp1(last+fix<1>());

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??$fix@$00@Eigen@@3V?$FixedInt@$00@internal@1@B
  00010	e8 00 00 00 00	 call	 ??R?$FixedInt@$00@internal@Eigen@@QEBA?AV012@XZ ; Eigen::internal::FixedInt<1>::operator()
  00015	44 0f b6 00	 movzx	 r8d, BYTE PTR [rax]
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?lastp1@Eigen@@3V?$AddExpr@V?$SymbolExpr@Usymbolic_last_tag@internal@Eigen@@@symbolic@Eigen@@V?$ValueExpr@V?$FixedInt@$00@internal@Eigen@@@23@@symbolic@1@B
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?last@Eigen@@3V?$SymbolExpr@Usymbolic_last_tag@internal@Eigen@@@symbolic@1@B
  00027	e8 00 00 00 00	 call	 ??$?H$00@?$BaseExpr@V?$SymbolExpr@Usymbolic_last_tag@internal@Eigen@@@symbolic@Eigen@@@symbolic@Eigen@@QEBA?AV?$AddExpr@V?$SymbolExpr@Usymbolic_last_tag@internal@Eigen@@@symbolic@Eigen@@V?$ValueExpr@V?$FixedInt@$00@internal@Eigen@@@23@@12@V?$FixedInt@$00@internal@2@@Z ; Eigen::symbolic::BaseExpr<Eigen::symbolic::SymbolExpr<Eigen::internal::symbolic_last_tag> >::operator+<1>
  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
??__Elastp1@Eigen@@YAXXZ ENDP				; Eigen::`dynamic initializer for 'lastp1''
text$di	ENDS
; Function compile flags: /Odtp
; File C:\Users\marij\OneDrive\Documenten\GitHub\Neural_Network\dependencies\Eigen\src\Core\util\IndexedViewHelper.h
;	COMDAT ??__Eall@Eigen@@YAXXZ
text$di	SEGMENT
??__Eall@Eigen@@YAXXZ PROC				; Eigen::`dynamic initializer for 'all'', COMDAT

; 171  : static const Eigen::internal::all_t all; // PLEASE use Eigen::all instead of Eigen::placeholders::all

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?all@Eigen@@3Uall_t@internal@1@B
  0000b	e8 00 00 00 00	 call	 ??0all_t@internal@Eigen@@QEAA@XZ ; Eigen::internal::all_t::all_t
  00010	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00014	c3		 ret	 0
??__Eall@Eigen@@YAXXZ ENDP				; Eigen::`dynamic initializer for 'all''
text$di	ENDS
; Function compile flags: /Odtp
; File C:\Users\marij\OneDrive\Documenten\GitHub\Neural_Network\dependencies\Eigen\src\Core\util\IndexedViewHelper.h
;	COMDAT ??__Eall@placeholders@Eigen@@YAXXZ
text$di	SEGMENT
??__Eall@placeholders@Eigen@@YAXXZ PROC			; Eigen::placeholders::`dynamic initializer for 'all'', COMDAT

; 179  :   EIGEN_DEPRECATED static const all_t  all  = Eigen::all;    // PLEASE use Eigen::all    instead of Eigen::placeholders::all

  00000	c2 00 00	 ret	 0
??__Eall@placeholders@Eigen@@YAXXZ ENDP			; Eigen::placeholders::`dynamic initializer for 'all''
text$di	ENDS
; Function compile flags: /Odtp
; File C:\Users\marij\OneDrive\Documenten\GitHub\Neural_Network\dependencies\Eigen\src\Core\util\IndexedViewHelper.h
;	COMDAT ??__Elast@placeholders@Eigen@@YAXXZ
text$di	SEGMENT
??__Elast@placeholders@Eigen@@YAXXZ PROC		; Eigen::placeholders::`dynamic initializer for 'last'', COMDAT

; 180  :   EIGEN_DEPRECATED static const last_t last = Eigen::last;   // PLEASE use Eigen::last   instead of Eigen::placeholders::last

  00000	c2 00 00	 ret	 0
??__Elast@placeholders@Eigen@@YAXXZ ENDP		; Eigen::placeholders::`dynamic initializer for 'last''
text$di	ENDS
; Function compile flags: /Odtp
; File C:\Users\marij\OneDrive\Documenten\GitHub\Neural_Network\dependencies\Eigen\src\Core\util\IndexedViewHelper.h
;	COMDAT ??__Eend@placeholders@Eigen@@YAXXZ
text$di	SEGMENT
??__Eend@placeholders@Eigen@@YAXXZ PROC			; Eigen::placeholders::`dynamic initializer for 'end'', COMDAT

; 181  :   EIGEN_DEPRECATED static const end_t  end  = Eigen::lastp1; // PLEASE use Eigen::lastp1 instead of Eigen::placeholders::end

  00000	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?lastp1@Eigen@@3V?$AddExpr@V?$SymbolExpr@Usymbolic_last_tag@internal@Eigen@@@symbolic@Eigen@@V?$ValueExpr@V?$FixedInt@$00@internal@Eigen@@@23@@symbolic@1@B
  00007	66 89 05 00 00
	00 00		 mov	 WORD PTR ?end@placeholders@Eigen@@3V?$AddExpr@V?$SymbolExpr@Usymbolic_last_tag@internal@Eigen@@@symbolic@Eigen@@V?$ValueExpr@V?$FixedInt@$00@internal@Eigen@@@23@@symbolic@2@B, ax
  0000e	c3		 ret	 0
??__Eend@placeholders@Eigen@@YAXXZ ENDP			; Eigen::placeholders::`dynamic initializer for 'end''
text$di	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.33.31629\include\random
;	COMDAT ??0random_device@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0random_device@std@@QEAA@XZ PROC			; std::random_device::random_device, COMDAT

; 4964 :     random_device() {}

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	c3		 ret	 0
??0random_device@std@@QEAA@XZ ENDP			; std::random_device::random_device
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.33.31629\include\random
;	COMDAT ?min@random_device@std@@SAIXZ
_TEXT	SEGMENT
?min@random_device@std@@SAIXZ PROC			; std::random_device::min, COMDAT

; 4969 :         return 0;

  00000	33 c0		 xor	 eax, eax

; 4970 :     }

  00002	c3		 ret	 0
?min@random_device@std@@SAIXZ ENDP			; std::random_device::min
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.33.31629\include\random
;	COMDAT ?max@random_device@std@@SAIXZ
_TEXT	SEGMENT
?max@random_device@std@@SAIXZ PROC			; std::random_device::max, COMDAT

; 4973 :         return static_cast<result_type>(-1);

  00000	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH

; 4974 :     }

  00005	c3		 ret	 0
?max@random_device@std@@SAIXZ ENDP			; std::random_device::max
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.33.31629\include\random
;	COMDAT ??Rrandom_device@std@@QEAAIXZ
_TEXT	SEGMENT
this$ = 48
??Rrandom_device@std@@QEAAIXZ PROC			; std::random_device::operator(), COMDAT

; 4980 :     _NODISCARD result_type operator()() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 4981 :         return _Random_device();

  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Random_device@std@@YAIXZ

; 4982 :     }

  0000f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00013	c3		 ret	 0
??Rrandom_device@std@@QEAAIXZ ENDP			; std::random_device::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\marij\OneDrive\Documenten\GitHub\Neural_Network\src\math.cpp
;	COMDAT ?init_random@Math@@YAXI@Z
_TEXT	SEGMENT
seed$ = 48
?init_random@Math@@YAXI@Z PROC				; Math::init_random, COMDAT

; 5    : void Math::init_random(uint32_t seed) { srand(seed); }

$LN4:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00008	8b 4c 24 30	 mov	 ecx, DWORD PTR seed$[rsp]
  0000c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_srand
  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
?init_random@Math@@YAXI@Z ENDP				; Math::init_random
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.33.31629\include\random
;	COMDAT ??0?$uniform_int_distribution@I@std@@QEAA@II@Z
_TEXT	SEGMENT
this$ = 48
_Min0$ = 56
_Max0$ = 64
??0?$uniform_int_distribution@I@std@@QEAA@II@Z PROC	; std::uniform_int_distribution<unsigned int>::uniform_int_distribution<unsigned int>, COMDAT

; 1922 :     explicit uniform_int_distribution(_Ty _Min0, _Ty _Max0 = (numeric_limits<_Ty>::max)()) : _Mybase(_Min0, _Max0) {}

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00012	44 8b 44 24 40	 mov	 r8d, DWORD PTR _Max0$[rsp]
  00017	8b 54 24 38	 mov	 edx, DWORD PTR _Min0$[rsp]
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00020	e8 00 00 00 00	 call	 ??0?$uniform_int@I@std@@QEAA@II@Z ; std::uniform_int<unsigned int>::uniform_int<unsigned int>
  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
??0?$uniform_int_distribution@I@std@@QEAA@II@Z ENDP	; std::uniform_int_distribution<unsigned int>::uniform_int_distribution<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.33.31629\include\random
;	COMDAT ??0?$uniform_int@I@std@@QEAA@II@Z
_TEXT	SEGMENT
tv70 = 32
this$ = 64
_Min0$ = 72
_Max0$ = 80
??0?$uniform_int@I@std@@QEAA@II@Z PROC			; std::uniform_int<unsigned int>::uniform_int<unsigned int>, COMDAT

; 1801 :     explicit uniform_int(_Ty _Min0, _Ty _Max0 = 9) : _Par(_Min0, _Max0) {}

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 89 44 24 20	 mov	 QWORD PTR tv70[rsp], rax
  0001c	44 8b 44 24 50	 mov	 r8d, DWORD PTR _Max0$[rsp]
  00021	8b 54 24 48	 mov	 edx, DWORD PTR _Min0$[rsp]
  00025	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv70[rsp]
  0002a	e8 00 00 00 00	 call	 ??0param_type@?$uniform_int@I@std@@QEAA@II@Z ; std::uniform_int<unsigned int>::param_type::param_type
  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00038	c3		 ret	 0
??0?$uniform_int@I@std@@QEAA@II@Z ENDP			; std::uniform_int<unsigned int>::uniform_int<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.33.31629\include\random
;	COMDAT ??0param_type@?$uniform_int@I@std@@QEAA@II@Z
_TEXT	SEGMENT
this$ = 48
_Min0$ = 56
_Max0$ = 64
??0param_type@?$uniform_int@I@std@@QEAA@II@Z PROC	; std::uniform_int<unsigned int>::param_type::param_type, COMDAT

; 1767 :         explicit param_type(result_type _Min0, result_type _Max0 = 9) {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1768 :             _Init(_Min0, _Max0);

  00012	44 8b 44 24 40	 mov	 r8d, DWORD PTR _Max0$[rsp]
  00017	8b 54 24 38	 mov	 edx, DWORD PTR _Min0$[rsp]
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00020	e8 00 00 00 00	 call	 ?_Init@param_type@?$uniform_int@I@std@@QEAAXII@Z ; std::uniform_int<unsigned int>::param_type::_Init

; 1769 :         }

  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
??0param_type@?$uniform_int@I@std@@QEAA@II@Z ENDP	; std::uniform_int<unsigned int>::param_type::param_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.33.31629\include\random
;	COMDAT ?_Init@param_type@?$uniform_int@I@std@@QEAAXII@Z
_TEXT	SEGMENT
this$ = 8
_Min0$ = 16
_Max0$ = 24
?_Init@param_type@?$uniform_int@I@std@@QEAAXII@Z PROC	; std::uniform_int<unsigned int>::param_type::_Init, COMDAT

; 1789 :         void _Init(_Ty _Min0, _Ty _Max0) { // set internal state

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1790 :             _STL_ASSERT(_Min0 <= _Max0, "invalid min and max arguments for uniform_int");
; 1791 :             _Min = _Min0;

  0000e	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00013	8b 4c 24 10	 mov	 ecx, DWORD PTR _Min0$[rsp]
  00017	89 08		 mov	 DWORD PTR [rax], ecx

; 1792 :             _Max = _Max0;

  00019	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0001e	8b 4c 24 18	 mov	 ecx, DWORD PTR _Max0$[rsp]
  00022	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 1793 :         }

  00025	c3		 ret	 0
?_Init@param_type@?$uniform_int@I@std@@QEAAXII@Z ENDP	; std::uniform_int<unsigned int>::param_type::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?$fix@$00@Eigen@@YAXXZ
text$di	SEGMENT
??__E?$fix@$00@Eigen@@YAXXZ PROC			; `dynamic initializer for 'Eigen::$00::$fix'', COMDAT
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??$fix@$00@Eigen@@3V?$FixedInt@$00@internal@1@B
  0000b	e8 00 00 00 00	 call	 ??0?$FixedInt@$00@internal@Eigen@@QEAA@XZ ; Eigen::internal::FixedInt<1>::FixedInt<1>
  00010	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00014	c3		 ret	 0
??__E?$fix@$00@Eigen@@YAXXZ ENDP			; `dynamic initializer for 'Eigen::$00::$fix''
text$di	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.33.31629\include\random
;	COMDAT ??$?RVrandom_device@std@@@?$uniform_int@I@std@@QEAAIAEAVrandom_device@1@@Z
_TEXT	SEGMENT
this$ = 48
_Eng$ = 56
??$?RVrandom_device@std@@@?$uniform_int@I@std@@QEAAIAEAVrandom_device@1@@Z PROC ; std::uniform_int<unsigned int>::operator()<std::random_device>, COMDAT

; 1832 :     _NODISCARD result_type operator()(_Engine& _Eng) _DISTRIBUTION_CONST {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1833 :         return _Eval(_Eng, _Par._Min, _Par._Max);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00013	44 8b 48 04	 mov	 r9d, DWORD PTR [rax+4]
  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001c	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  0001f	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Eng$[rsp]
  00024	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00029	e8 00 00 00 00	 call	 ??$_Eval@Vrandom_device@std@@@?$uniform_int@I@std@@AEBAIAEAVrandom_device@1@II@Z ; std::uniform_int<unsigned int>::_Eval<std::random_device>

; 1834 :     }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
??$?RVrandom_device@std@@@?$uniform_int@I@std@@QEAAIAEAVrandom_device@1@@Z ENDP ; std::uniform_int<unsigned int>::operator()<std::random_device>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.33.31629\include\random
;	COMDAT ??$_Eval@Vrandom_device@std@@@?$uniform_int@I@std@@AEBAIAEAVrandom_device@1@II@Z
_TEXT	SEGMENT
_Umin$ = 32
_Umax$ = 36
_Uret$ = 40
_Generator$ = 48
__$ArrayPad$ = 72
this$ = 96
_Eng$ = 104
_Min$ = 112
_Max$ = 120
??$_Eval@Vrandom_device@std@@@?$uniform_int@I@std@@AEBAIAEAVrandom_device@1@II@Z PROC ; std::uniform_int<unsigned int>::_Eval<std::random_device>, COMDAT

; 1866 :     result_type _Eval(_Engine& _Eng, _Ty _Min, _Ty _Max) const { // compute next value in range [_Min, _Max]

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1867 :         _Rng_from_urng<_Uty, _Engine> _Generator(_Eng);

  00027	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Eng$[rsp]
  0002c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Generator$[rsp]
  00031	e8 00 00 00 00	 call	 ??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAA@AEAVrandom_device@1@@Z ; std::_Rng_from_urng<unsigned int,std::random_device>::_Rng_from_urng<unsigned int,std::random_device>

; 1868 : 
; 1869 :         const _Uty _Umin = _Adjust(static_cast<_Uty>(_Min));

  00036	8b 4c 24 70	 mov	 ecx, DWORD PTR _Min$[rsp]
  0003a	e8 00 00 00 00	 call	 ?_Adjust@?$uniform_int@I@std@@CAII@Z ; std::uniform_int<unsigned int>::_Adjust
  0003f	89 44 24 20	 mov	 DWORD PTR _Umin$[rsp], eax

; 1870 :         const _Uty _Umax = _Adjust(static_cast<_Uty>(_Max));

  00043	8b 4c 24 78	 mov	 ecx, DWORD PTR _Max$[rsp]
  00047	e8 00 00 00 00	 call	 ?_Adjust@?$uniform_int@I@std@@CAII@Z ; std::uniform_int<unsigned int>::_Adjust
  0004c	89 44 24 24	 mov	 DWORD PTR _Umax$[rsp], eax

; 1871 : 
; 1872 :         _Uty _Uret;
; 1873 : 
; 1874 :         if (_Umax - _Umin == static_cast<_Uty>(-1)) {

  00050	8b 44 24 20	 mov	 eax, DWORD PTR _Umin$[rsp]
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR _Umax$[rsp]
  00058	2b c8		 sub	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  0005f	75 10		 jne	 SHORT $LN2@Eval

; 1875 :             _Uret = static_cast<_Uty>(_Generator._Get_all_bits());

  00061	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Generator$[rsp]
  00066	e8 00 00 00 00	 call	 ?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAIXZ ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_all_bits
  0006b	89 44 24 28	 mov	 DWORD PTR _Uret$[rsp], eax

; 1876 :         } else {

  0006f	eb 1e		 jmp	 SHORT $LN3@Eval
$LN2@Eval:

; 1877 :             _Uret = static_cast<_Uty>(_Generator(static_cast<_Uty>(_Umax - _Umin + 1)));

  00071	8b 44 24 20	 mov	 eax, DWORD PTR _Umin$[rsp]
  00075	8b 4c 24 24	 mov	 ecx, DWORD PTR _Umax$[rsp]
  00079	2b c8		 sub	 ecx, eax
  0007b	8b c1		 mov	 eax, ecx
  0007d	ff c0		 inc	 eax
  0007f	8b d0		 mov	 edx, eax
  00081	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Generator$[rsp]
  00086	e8 00 00 00 00	 call	 ??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAII@Z ; std::_Rng_from_urng<unsigned int,std::random_device>::operator()
  0008b	89 44 24 28	 mov	 DWORD PTR _Uret$[rsp], eax
$LN3@Eval:

; 1878 :         }
; 1879 : 
; 1880 :         return static_cast<_Ty>(_Adjust(static_cast<_Uty>(_Uret + _Umin)));

  0008f	8b 44 24 20	 mov	 eax, DWORD PTR _Umin$[rsp]
  00093	8b 4c 24 28	 mov	 ecx, DWORD PTR _Uret$[rsp]
  00097	03 c8		 add	 ecx, eax
  00099	8b c1		 mov	 eax, ecx
  0009b	8b c8		 mov	 ecx, eax
  0009d	e8 00 00 00 00	 call	 ?_Adjust@?$uniform_int@I@std@@CAII@Z ; std::uniform_int<unsigned int>::_Adjust

; 1881 :     }

  000a2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000a7	48 33 cc	 xor	 rcx, rsp
  000aa	e8 00 00 00 00	 call	 __security_check_cookie
  000af	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000b3	c3		 ret	 0
??$_Eval@Vrandom_device@std@@@?$uniform_int@I@std@@AEBAIAEAVrandom_device@1@II@Z ENDP ; std::uniform_int<unsigned int>::_Eval<std::random_device>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAIXZ
_TEXT	SEGMENT
_Ret$ = 32
_Num$1 = 40
this$ = 64
?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAIXZ PROC ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_all_bits, COMDAT

; 6189 :     _Udiff _Get_all_bits() {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 6190 :         _Udiff _Ret = 0;

  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _Ret$[rsp], 0

; 6191 : 
; 6192 :         for (size_t _Num = 0; _Num < CHAR_BIT * sizeof(_Udiff); _Num += _Bits) { // don't mask away any bits

  00011	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _Num$1[rsp], 0
  0001a	eb 19		 jmp	 SHORT $LN4@Get_all_bi
$LN2@Get_all_bi:
  0001c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00021	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00025	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Num$1[rsp]
  0002a	48 03 c8	 add	 rcx, rax
  0002d	48 8b c1	 mov	 rax, rcx
  00030	48 89 44 24 28	 mov	 QWORD PTR _Num$1[rsp], rax
$LN4@Get_all_bi:
  00035	48 83 7c 24 28
	20		 cmp	 QWORD PTR _Num$1[rsp], 32 ; 00000020H
  0003b	73 39		 jae	 SHORT $LN3@Get_all_bi

; 6193 :             _Ret <<= _Bits - 1; // avoid full shift

  0003d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00042	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00046	48 ff c8	 dec	 rax
  00049	c4 e2 79 f7 44
	24 20		 shlx	 eax, DWORD PTR _Ret$[rsp], eax
  00050	89 44 24 20	 mov	 DWORD PTR _Ret$[rsp], eax

; 6194 :             _Ret <<= 1;

  00054	8b 44 24 20	 mov	 eax, DWORD PTR _Ret$[rsp]
  00058	d1 e0		 shl	 eax, 1
  0005a	89 44 24 20	 mov	 DWORD PTR _Ret$[rsp], eax

; 6195 :             _Ret |= _Get_bits();

  0005e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00063	e8 00 00 00 00	 call	 ?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_bits
  00068	8b 4c 24 20	 mov	 ecx, DWORD PTR _Ret$[rsp]
  0006c	0b c8		 or	 ecx, eax
  0006e	8b c1		 mov	 eax, ecx
  00070	89 44 24 20	 mov	 DWORD PTR _Ret$[rsp], eax

; 6196 :         }

  00074	eb a6		 jmp	 SHORT $LN2@Get_all_bi
$LN3@Get_all_bi:

; 6197 : 
; 6198 :         return _Ret;

  00076	8b 44 24 20	 mov	 eax, DWORD PTR _Ret$[rsp]

; 6199 :     }

  0007a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007e	c3		 ret	 0
?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAIXZ ENDP ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_all_bits
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAII@Z
_TEXT	SEGMENT
_Mask$1 = 32
_Ret$2 = 36
tv79 = 40
this$ = 64
_Index$ = 72
??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAII@Z PROC ; std::_Rng_from_urng<unsigned int,std::random_device>::operator(), COMDAT

; 6168 :     _Diff operator()(_Diff _Index) { // adapt _Urng closed range to [0, _Index)

$LN10:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN2@operator:

; 6169 :         for (;;) { // try a sample random value
; 6170 :             _Udiff _Ret  = 0; // random bits

  0000d	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR _Ret$2[rsp], 0

; 6171 :             _Udiff _Mask = 0; // 2^N - 1, _Ret is within [0, _Mask]

  00015	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _Mask$1[rsp], 0
$LN5@operator:

; 6172 : 
; 6173 :             while (_Mask < _Udiff(_Index - 1)) { // need more random bits

  0001d	8b 44 24 48	 mov	 eax, DWORD PTR _Index$[rsp]
  00021	ff c8		 dec	 eax
  00023	39 44 24 20	 cmp	 DWORD PTR _Mask$1[rsp], eax
  00027	73 6e		 jae	 SHORT $LN6@operator

; 6174 :                 _Ret <<= _Bits - 1; // avoid full shift

  00029	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00032	48 ff c8	 dec	 rax
  00035	c4 e2 79 f7 44
	24 24		 shlx	 eax, DWORD PTR _Ret$2[rsp], eax
  0003c	89 44 24 24	 mov	 DWORD PTR _Ret$2[rsp], eax

; 6175 :                 _Ret <<= 1;

  00040	8b 44 24 24	 mov	 eax, DWORD PTR _Ret$2[rsp]
  00044	d1 e0		 shl	 eax, 1
  00046	89 44 24 24	 mov	 DWORD PTR _Ret$2[rsp], eax

; 6176 :                 _Ret |= _Get_bits();

  0004a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0004f	e8 00 00 00 00	 call	 ?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_bits
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR _Ret$2[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	89 44 24 24	 mov	 DWORD PTR _Ret$2[rsp], eax

; 6177 :                 _Mask <<= _Bits - 1; // avoid full shift

  00060	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00065	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00069	48 ff c8	 dec	 rax
  0006c	c4 e2 79 f7 44
	24 20		 shlx	 eax, DWORD PTR _Mask$1[rsp], eax
  00073	89 44 24 20	 mov	 DWORD PTR _Mask$1[rsp], eax

; 6178 :                 _Mask <<= 1;

  00077	8b 44 24 20	 mov	 eax, DWORD PTR _Mask$1[rsp]
  0007b	d1 e0		 shl	 eax, 1
  0007d	89 44 24 20	 mov	 DWORD PTR _Mask$1[rsp], eax

; 6179 :                 _Mask |= _Bmask;

  00081	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00086	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00089	8b 4c 24 20	 mov	 ecx, DWORD PTR _Mask$1[rsp]
  0008d	0b c8		 or	 ecx, eax
  0008f	8b c1		 mov	 eax, ecx
  00091	89 44 24 20	 mov	 DWORD PTR _Mask$1[rsp], eax

; 6180 :             }

  00095	eb 86		 jmp	 SHORT $LN5@operator
$LN6@operator:

; 6181 : 
; 6182 :             // _Ret is [0, _Mask], _Index - 1 <= _Mask, return if unbiased
; 6183 :             if (_Ret / _Index < _Mask / _Index || _Mask % _Index == _Udiff(_Index - 1)) {

  00097	33 d2		 xor	 edx, edx
  00099	8b 44 24 24	 mov	 eax, DWORD PTR _Ret$2[rsp]
  0009d	f7 74 24 48	 div	 DWORD PTR _Index$[rsp]
  000a1	89 44 24 28	 mov	 DWORD PTR tv79[rsp], eax
  000a5	33 d2		 xor	 edx, edx
  000a7	8b 44 24 20	 mov	 eax, DWORD PTR _Mask$1[rsp]
  000ab	f7 74 24 48	 div	 DWORD PTR _Index$[rsp]
  000af	8b 4c 24 28	 mov	 ecx, DWORD PTR tv79[rsp]
  000b3	3b c8		 cmp	 ecx, eax
  000b5	72 16		 jb	 SHORT $LN8@operator
  000b7	33 d2		 xor	 edx, edx
  000b9	8b 44 24 20	 mov	 eax, DWORD PTR _Mask$1[rsp]
  000bd	f7 74 24 48	 div	 DWORD PTR _Index$[rsp]
  000c1	8b c2		 mov	 eax, edx
  000c3	8b 4c 24 48	 mov	 ecx, DWORD PTR _Index$[rsp]
  000c7	ff c9		 dec	 ecx
  000c9	3b c1		 cmp	 eax, ecx
  000cb	75 0e		 jne	 SHORT $LN7@operator
$LN8@operator:

; 6184 :                 return static_cast<_Diff>(_Ret % _Index);

  000cd	33 d2		 xor	 edx, edx
  000cf	8b 44 24 24	 mov	 eax, DWORD PTR _Ret$2[rsp]
  000d3	f7 74 24 48	 div	 DWORD PTR _Index$[rsp]
  000d7	8b c2		 mov	 eax, edx
  000d9	eb 05		 jmp	 SHORT $LN1@operator
$LN7@operator:

; 6185 :             }
; 6186 :         }

  000db	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN1@operator:

; 6187 :     }

  000e0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e4	c3		 ret	 0
??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAII@Z ENDP ; std::_Rng_from_urng<unsigned int,std::random_device>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAA@AEAVrandom_device@1@@Z
_TEXT	SEGMENT
tv70 = 32
this$ = 64
_Func$ = 72
??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAA@AEAVrandom_device@1@@Z PROC ; std::_Rng_from_urng<unsigned int,std::random_device>::_Rng_from_urng<unsigned int,std::random_device>, COMDAT

; 6162 :     explicit _Rng_from_urng(_Urng& _Func) : _Ref(_Func), _Bits(CHAR_BIT * sizeof(_Udiff)), _Bmask(_Udiff(-1)) {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Func$[rsp]
  00018	48 89 08	 mov	 QWORD PTR [rax], rcx
  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00020	48 c7 40 08 20
	00 00 00	 mov	 QWORD PTR [rax+8], 32	; 00000020H
  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002d	c7 40 10 ff ff
	ff ff		 mov	 DWORD PTR [rax+16], -1	; ffffffffH

; 6163 :         for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1) {

  00034	eb 12		 jmp	 SHORT $LN4@Rng_from_u
$LN2@Rng_from_u:
  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0003b	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0003e	d1 e8		 shr	 eax, 1
  00040	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00045	89 41 10	 mov	 DWORD PTR [rcx+16], eax
$LN4@Rng_from_u:
  00048	e8 00 00 00 00	 call	 ?max@random_device@std@@SAIXZ ; std::random_device::max
  0004d	89 44 24 20	 mov	 DWORD PTR tv70[rsp], eax
  00051	e8 00 00 00 00	 call	 ?min@random_device@std@@SAIXZ ; std::random_device::min
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR tv70[rsp]
  0005a	2b c8		 sub	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00063	3b 41 10	 cmp	 eax, DWORD PTR [rcx+16]
  00066	73 17		 jae	 SHORT $LN3@Rng_from_u

; 6164 :             --_Bits;

  00068	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0006d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00071	48 ff c8	 dec	 rax
  00074	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00079	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 6165 :         }

  0007d	eb b7		 jmp	 SHORT $LN2@Rng_from_u
$LN3@Rng_from_u:

; 6166 :     }

  0007f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00084	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00088	c3		 ret	 0
??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAA@AEAVrandom_device@1@@Z ENDP ; std::_Rng_from_urng<unsigned int,std::random_device>::_Rng_from_urng<unsigned int,std::random_device>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.33.31629\include\random
;	COMDAT ?_Adjust@?$uniform_int@I@std@@CAII@Z
_TEXT	SEGMENT
_Uval$ = 8
?_Adjust@?$uniform_int@I@std@@CAII@Z PROC		; std::uniform_int<unsigned int>::_Adjust, COMDAT

; 1883 :     static _Uty _Adjust(_Uty _Uval) { // convert signed ranges to unsigned ranges and vice versa

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 1884 :         if constexpr (is_signed_v<_Ty>) {
; 1885 :             const _Uty _Adjuster = (static_cast<_Uty>(-1) >> 1) + 1; // 2^(N-1)
; 1886 : 
; 1887 :             if (_Uval < _Adjuster) {
; 1888 :                 return static_cast<_Uty>(_Uval + _Adjuster);
; 1889 :             } else {
; 1890 :                 return static_cast<_Uty>(_Uval - _Adjuster);
; 1891 :             }
; 1892 :         } else { // _Ty is already unsigned, do nothing
; 1893 :             return _Uval;

  00004	8b 44 24 08	 mov	 eax, DWORD PTR _Uval$[rsp]

; 1894 :         }
; 1895 :     }

  00008	c3		 ret	 0
?_Adjust@?$uniform_int@I@std@@CAII@Z ENDP		; std::uniform_int<unsigned int>::_Adjust
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ
_TEXT	SEGMENT
_Val$1 = 32
tv66 = 36
this$ = 64
?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ PROC ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_bits, COMDAT

; 6205 :     _Udiff _Get_bits() { // return a random value within [0, _Bmask]

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN2@Get_bits:

; 6206 :         for (;;) { // repeat until random value is in range
; 6207 :             _Udiff _Val = _Ref() - (_Urng::min)();

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00011	e8 00 00 00 00	 call	 ??Rrandom_device@std@@QEAAIXZ ; std::random_device::operator()
  00016	89 44 24 24	 mov	 DWORD PTR tv66[rsp], eax
  0001a	e8 00 00 00 00	 call	 ?min@random_device@std@@SAIXZ ; std::random_device::min
  0001f	8b 4c 24 24	 mov	 ecx, DWORD PTR tv66[rsp]
  00023	2b c8		 sub	 ecx, eax
  00025	8b c1		 mov	 eax, ecx
  00027	89 44 24 20	 mov	 DWORD PTR _Val$1[rsp], eax

; 6208 : 
; 6209 :             if (_Val <= _Bmask) {

  0002b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00030	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00033	39 44 24 20	 cmp	 DWORD PTR _Val$1[rsp], eax
  00037	77 06		 ja	 SHORT $LN5@Get_bits

; 6210 :                 return _Val;

  00039	8b 44 24 20	 mov	 eax, DWORD PTR _Val$1[rsp]
  0003d	eb 02		 jmp	 SHORT $LN1@Get_bits
$LN5@Get_bits:

; 6211 :             }
; 6212 :         }

  0003f	eb c8		 jmp	 SHORT $LN2@Get_bits
$LN1@Get_bits:

; 6213 :     }

  00041	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00045	c3		 ret	 0
?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ ENDP ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_bits
_TEXT	ENDS
END
